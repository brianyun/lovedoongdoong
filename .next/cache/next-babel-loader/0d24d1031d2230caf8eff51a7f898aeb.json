{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { Row, Col } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useRouter } from \"next/router\";\nimport storage from \"../back/cloudStorage\";\nimport { ADD_URL } from \"../reducers/answer\";\nimport { MAKE_DIRECT_TRUE } from \"../reducers/answer\";\nimport { CLEAR_URLS } from \"../reducers/answer\";\nimport { halfCol, fullCol, centerCol, WidthImg, WidthDiv, Texty, Paragraphy, LineBreakText, GoodBadBtn } from \"../assets/css/style_result\";\nimport { Spinner } from \"react-activity\";\nimport result from \"../assets/result.json\";\nimport Footer from \"./Footer\";\nimport ShareGroup from \"./ShareGroup\";\n\nconst Result = ({\n  name\n}) => {\n  const v = result[name];\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    url\n  } = useSelector(state => state.answer);\n  const {\n    isDirect\n  } = useSelector(state => state.answer);\n  const {\n    0: screenshotUrl,\n    1: setScreenshotUrl\n  } = useState(null);\n  const {\n    0: thumbUrl,\n    1: setThumbUrl\n  } = useState(null);\n  const {\n    0: goodUrl,\n    1: setGoodUrl\n  } = useState(null);\n  const {\n    0: badUrl,\n    1: setBadUrl\n  } = useState(null);\n  const {\n    0: goodTitle,\n    1: setGoodTitle\n  } = useState(\"\");\n  const {\n    0: goodId,\n    1: setGoodId\n  } = useState(\"\");\n  const {\n    0: badTitle,\n    1: setBadTitle\n  } = useState(\"\");\n  const {\n    0: badId,\n    1: setBadId\n  } = useState(\"\");\n  useEffect(() => {\n    setScreenshotUrl(url[\"screenshotUrl\"]);\n    setThumbUrl(url[\"thumbUrl\"]);\n    setGoodUrl(url[\"goodUrl\"]);\n    setBadUrl(url[\"badUrl\"]);\n    setGoodTitle(result[v[\"good\"]][\"title\"]);\n    setGoodId(result[v[\"good\"]][\"id\"]);\n    setBadTitle(result[v[\"bad\"]][\"title\"]);\n    setBadId(result[v[\"bad\"]][\"id\"]);\n  }, [url]);\n  useEffect(() => {\n    dispatch({\n      type: CLEAR_URLS\n    });\n\n    if (isDirect && !thumbUrl) {\n      console.log(\"[isDirect]\");\n      storage.ref().child(v[\"screenshot\"]).getDownloadURL().then(url => {\n        setScreenshotUrl(url);\n      }).catch(err => {\n        return;\n      });\n      storage.ref().child(v[\"thumbnail\"]).getDownloadURL().then(url => {\n        setThumbUrl(url);\n      }).catch(err => {\n        return;\n      });\n      storage.ref().child(result[v[\"good\"]][\"thumbnail\"]).getDownloadURL().then(url => {\n        setGoodUrl(url);\n      }).catch(err => {\n        return;\n      });\n      storage.ref().child(result[v[\"bad\"]][\"thumbnail\"]).getDownloadURL().then(url => {\n        setBadUrl(url);\n      }).catch(err => {\n        return;\n      });\n    } else {\n      dispatch({\n        type: MAKE_DIRECT_TRUE\n      });\n    }\n  }, [isDirect]);\n  useEffect(() => {\n    if (isDirect && screenshotUrl && thumbUrl && goodUrl && badUrl) {\n      dispatch({\n        type: ADD_URL,\n        data: {\n          screenshotUrl: screenshotUrl,\n          thumbUrl: thumbUrl,\n          goodUrl: goodUrl,\n          badUrl: badUrl\n        }\n      });\n    }\n  }, [screenshotUrl, thumbUrl, goodUrl, badUrl]);\n\n  const toGoodBad = id => {\n    if (id === \"\") {\n      return;\n    }\n\n    router.push(\"/result/\".concat(id));\n    dispatch({\n      type: CLEAR_URLS\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Row, {\n    justify: \"center\"\n  }, __jsx(Texty, {\n    top: 30,\n    font: 15\n  }, \"\\uB098\\uC640 \\uCC30\\uB5A1\\uAD81\\uD569\\uC778 \\uBC18\\uB824\\uB3D9\\uBB3C\\uC740?\")), __jsx(Row, {\n    justify: \"center\"\n  }, __jsx(Col, centerCol, __jsx(Texty, {\n    strong: true,\n    top: 10,\n    font: 30,\n    color: \"#be2edd\"\n  }, v[\"title\"]))), __jsx(Row, {\n    justify: \"center\"\n  }, __jsx(Col, centerCol, thumbUrl ? __jsx(WidthImg, {\n    src: thumbUrl\n  }) : __jsx(React.Fragment, null, __jsx(WidthDiv, null, __jsx(Spinner, null))))), __jsx(Row, {\n    justify: \"center\"\n  }, __jsx(Col, fullCol, __jsx(Texty, {\n    font: 15\n  }, \"\\uD604\\uC7AC 100\\uBA85 \\uC911 \", v[\"competition\"], \"\\uBA85\\uC774 \\uACBD\\uD569\\uC911\\uC785\\uB2C8\\uB2E4!\"))), __jsx(Row, {\n    justify: \"center\"\n  }, __jsx(Texty, {\n    strong: true,\n    top: 10,\n    font: 20,\n    color: \"#be2edd\"\n  }, v[\"subtitle\"])), __jsx(Row, {\n    justify: \"center\"\n  }, __jsx(Col, fullCol, __jsx(Paragraphy, {\n    top: 10,\n    font: 15\n  }, v[\"description\"]))), __jsx(Row, {\n    style: {\n      height: \"40px\"\n    }\n  }), __jsx(Row, {\n    justify: \"center\"\n  }, __jsx(Col, halfCol, __jsx(Row, {\n    justify: \"center\"\n  }, __jsx(Texty, {\n    font: 15,\n    strong: true\n  }, \"~\\uD568\\uAED8\\uD558\\uBA74 \\uC88B\\uC740 \\uBC18\\uB824\\uB3D9\\uBB3C~\")), __jsx(Row, null, __jsx(GoodBadBtn, {\n    type: \"link\",\n    justify: \"center\",\n    onClick: () => toGoodBad(goodId)\n  }, __jsx(WidthImg, {\n    src: goodUrl\n  }), __jsx(LineBreakText, {\n    font: 15\n  }, goodTitle)))), __jsx(Col, {\n    xs: 1,\n    sm: 2,\n    md: 2,\n    lg: 2,\n    xl: 3\n  }), __jsx(Col, halfCol, __jsx(Row, {\n    justify: \"center\"\n  }, __jsx(Texty, {\n    font: 15,\n    strong: true\n  }, \"~\\uC798 \\uB9DE\\uC9C0 \\uC54A\\uB294 \\uBC18\\uB824\\uB3D9\\uBB3C~\")), __jsx(Row, null, __jsx(GoodBadBtn, {\n    type: \"link\",\n    justify: \"center\",\n    onClick: () => toGoodBad(badId)\n  }, __jsx(WidthImg, {\n    src: badUrl\n  }), __jsx(LineBreakText, {\n    font: 15\n  }, badTitle))))), __jsx(ShareGroup, {\n    title: v[\"title\"] ? v[\"title\"] : \"\",\n    thumbUrl: thumbUrl ? thumbUrl : \"\"\n  }), __jsx(Footer, null));\n};\n\nexport default Result;","map":null,"metadata":{},"sourceType":"module"}