{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/hsyun/programming/web/mini_project/firebase-MBTI/pages/test2.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useDispatch } from \"react-redux\";\nimport Slider from \"react-slick\";\nimport { ADD_ANSWER } from \"../reducers/answer\";\nimport Question from \"../components/Question\";\nimport ProgressBar from \"../components/ProgressBar\";\nimport list from \"../assets/list.json\";\n\nvar Test = function Test() {\n  _s();\n\n  var router = useRouter();\n  var dispatch = useDispatch();\n\n  var _useState = useState(0),\n      count = _useState[0],\n      setCount = _useState[1];\n\n  var maxCount = list.arr.length;\n\n  var _useState2 = useState([]),\n      answerArr = _useState2[0],\n      setAnswerArr = _useState2[1];\n\n  var indexArr = [1, 2, 3, 4, 5, 6, 7];\n\n  var _useState3 = useState(0),\n      currentSlide = _useState3[0],\n      setCurrentSlide = _useState3[1];\n\n  function handler(ans, id) {\n    if (count !== id) {\n      setAnswerArr(function (prevArr) {\n        return [].concat(_toConsumableArray(prevArr), [ans]);\n      });\n\n      if (id === maxCount) {\n        router.push(\"/loading\");\n        return;\n      }\n\n      setCount(id);\n    } else {\n      return;\n    }\n  }\n\n  useEffect(function () {\n    if (answerArr.length === maxCount) {\n      console.log(\"AnswerArr is: \" + answerArr);\n      dispatch({\n        type: ADD_ANSWER,\n        data: answerArr\n      });\n    }\n  });\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 3\n    }\n  }, __jsx(Slider, {\n    initialSlide: 0,\n    afterChange: function afterChange(slide) {\n      return setCurrentSlide(slide);\n    },\n    infinite: false,\n    arrows: true,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    style: {\n      marginTop: \"100px\",\n      height: \"100%\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 4\n    }\n  }, indexArr.map(function (ind) {\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }, __jsx(Question, {\n      index: ind,\n      handler: handler,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 8\n      }\n    }));\n  })), __jsx(ProgressBar, {\n    i: count,\n    length: maxCount,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }\n  }));\n};\n\n_s(Test, \"e9FvHwM4JcLAl3o4N1MDKuz2Juw=\", false, function () {\n  return [useRouter, useDispatch];\n});\n\n_c = Test;\nexport default Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["/Users/hsyun/programming/web/mini_project/firebase-MBTI/pages/test2.js"],"names":["React","useRef","useEffect","useState","useRouter","useDispatch","Slider","ADD_ANSWER","Question","ProgressBar","list","Test","router","dispatch","count","setCount","maxCount","arr","length","answerArr","setAnswerArr","indexArr","currentSlide","setCurrentSlide","handler","ans","id","prevArr","push","console","log","type","data","slide","marginTop","height","map","ind"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useDispatch } from \"react-redux\";\nimport Slider from \"react-slick\";\n\nimport { ADD_ANSWER } from \"../reducers/answer\";\nimport Question from \"../components/Question\";\nimport ProgressBar from \"../components/ProgressBar\";\nimport list from \"../assets/list.json\";\n\nconst Test = () => {\n\tconst router = useRouter();\n\tconst dispatch = useDispatch();\n\n\tconst [count, setCount] = useState(0);\n\tconst maxCount = list.arr.length;\n\tconst [answerArr, setAnswerArr] = useState([]);\n\n\tconst indexArr = [1, 2, 3, 4, 5, 6, 7];\n\tconst [currentSlide, setCurrentSlide] = useState(0);\n\n\tfunction handler(ans, id) {\n\t\tif (count !== id) {\n\t\t\tsetAnswerArr((prevArr) => [...prevArr, ans]);\n\n\t\t\tif (id === maxCount) {\n\t\t\t\trouter.push(\"/loading\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsetCount(id);\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tif (answerArr.length === maxCount) {\n\t\t\tconsole.log(\"AnswerArr is: \" + answerArr);\n\t\t\tdispatch({\n\t\t\t\ttype: ADD_ANSWER,\n\t\t\t\tdata: answerArr,\n\t\t\t});\n\t\t}\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t<Slider\n\t\t\t\tinitialSlide={0}\n\t\t\t\tafterChange={(slide) => setCurrentSlide(slide)}\n\t\t\t\tinfinite={false}\n\t\t\t\tarrows\n\t\t\t\tslidesToShow={1}\n\t\t\t\tslidesToScroll={1}\n\t\t\t\tstyle={{ marginTop: \"100px\", height: \"100%\" }}\n\t\t\t>\n\t\t\t\t{indexArr.map((ind) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Question index={ind} handler={handler} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</Slider>\n\n\t\t\t<ProgressBar i={count} length={maxCount} />\n\t\t</div>\n\t);\n};\n\nexport default Test;\n"]},"metadata":{},"sourceType":"module"}