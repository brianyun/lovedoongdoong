{"ast":null,"code":"var _jsxFileName = \"/Users/hsyun/programming/web/mini_project/firebase-MBTI/pages/test2.js\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useDispatch } from \"react-redux\";\nimport Slider from \"react-slick\";\nimport { ADD_ANSWER } from \"../reducers/answer\";\nimport Question from \"../components/Question\";\nimport ProgressBar from \"../components/ProgressBar\";\nimport list from \"../assets/list.json\";\n\nconst Test = () => {\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const {\n    0: count,\n    1: setCount\n  } = useState(0);\n  const maxCount = list.arr.length;\n  const {\n    0: answerArr,\n    1: setAnswerArr\n  } = useState([]);\n  const indexArr = [1, 2, 3, 4, 5, 6, 7];\n  const slickRef = useRef();\n\n  const handler = (ans, id) => {\n    console.log(\"id = \", id);\n    console.log(\"count = \", count);\n\n    if (count !== id) {\n      setAnswerArr(prevArr => [...prevArr, ans]); // if (id === maxCount) {\n      // \trouter.push(\"/\");\n      // \treturn;\n      // }\n\n      slickRef.current.slickNext();\n      setCount(id);\n    } else {\n      console.log(\"too fast\");\n      return;\n    }\n  };\n\n  useEffect(() => {\n    if (answerArr.length === maxCount) {\n      console.log(\"AnswerArr is: \" + answerArr);\n      dispatch({\n        type: ADD_ANSWER,\n        data: answerArr\n      });\n    }\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 3\n    }\n  }, __jsx(Slider, {\n    infinite: false,\n    swipe: false,\n    draggable: false,\n    style: {\n      marginTop: \"100px\",\n      height: \"100%\"\n    },\n    ref: slickRef,\n    fade: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 4\n    }\n  }, indexArr.map(ind => {\n    console.log(\"ind is = \", ind);\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    }, __jsx(Question, {\n      index: ind,\n      handler: handler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 8\n      }\n    }));\n  })), __jsx(ProgressBar, {\n    i: count,\n    length: maxCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 4\n    }\n  }));\n};\n\nexport default Test;","map":{"version":3,"sources":["/Users/hsyun/programming/web/mini_project/firebase-MBTI/pages/test2.js"],"names":["React","useRef","useEffect","useState","useRouter","useDispatch","Slider","ADD_ANSWER","Question","ProgressBar","list","Test","router","dispatch","count","setCount","maxCount","arr","length","answerArr","setAnswerArr","indexArr","slickRef","handler","ans","id","console","log","prevArr","current","slickNext","type","data","marginTop","height","map","ind"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,SAASC,UAAT,QAA2B,oBAA3B;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAClB,QAAMC,MAAM,GAAGR,SAAS,EAAxB;AACA,QAAMS,QAAQ,GAAGR,WAAW,EAA5B;AAEA,QAAM;AAAA,OAACS,KAAD;AAAA,OAAQC;AAAR,MAAoBZ,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAMa,QAAQ,GAAGN,IAAI,CAACO,GAAL,CAASC,MAA1B;AACA,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BjB,QAAQ,CAAC,EAAD,CAA1C;AAEA,QAAMkB,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAjB;AACA,QAAMC,QAAQ,GAAGrB,MAAM,EAAvB;;AAEA,QAAMsB,OAAO,GAAG,CAACC,GAAD,EAAMC,EAAN,KAAa;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,EAArB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBb,KAAxB;;AACA,QAAIA,KAAK,KAAKW,EAAd,EAAkB;AACjBL,MAAAA,YAAY,CAAEQ,OAAD,IAAa,CAAC,GAAGA,OAAJ,EAAaJ,GAAb,CAAd,CAAZ,CADiB,CAGjB;AACA;AACA;AACA;;AACAF,MAAAA,QAAQ,CAACO,OAAT,CAAiBC,SAAjB;AACAf,MAAAA,QAAQ,CAACU,EAAD,CAAR;AACA,KATD,MASO;AACNC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA;AACA;AACD,GAhBD;;AAkBAzB,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIiB,SAAS,CAACD,MAAV,KAAqBF,QAAzB,EAAmC;AAClCU,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBR,SAA/B;AACAN,MAAAA,QAAQ,CAAC;AACRkB,QAAAA,IAAI,EAAExB,UADE;AAERyB,QAAAA,IAAI,EAAEb;AAFE,OAAD,CAAR;AAIA;AACD,GARQ,CAAT;AAUA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,MAAD;AACC,IAAA,QAAQ,EAAE,KADX;AAEC,IAAA,KAAK,EAAE,KAFR;AAGC,IAAA,SAAS,EAAE,KAHZ;AAIC,IAAA,KAAK,EAAE;AAAEc,MAAAA,SAAS,EAAE,OAAb;AAAsBC,MAAAA,MAAM,EAAE;AAA9B,KAJR;AAKC,IAAA,GAAG,EAAEZ,QALN;AAMC,IAAA,IAAI,EAAE,IANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQED,QAAQ,CAACc,GAAT,CAAcC,GAAD,IAAS;AACtBV,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBS,GAAzB;AACA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,MAAC,QAAD;AAAU,MAAA,KAAK,EAAEA,GAAjB;AAAsB,MAAA,OAAO,EAAEb,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADD;AAKA,GAPA,CARF,CADD,EAmBC,MAAC,WAAD;AAAa,IAAA,CAAC,EAAET,KAAhB;AAAuB,IAAA,MAAM,EAAEE,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBD,CADD;AAuBA,CA9DD;;AAgEA,eAAeL,IAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useDispatch } from \"react-redux\";\nimport Slider from \"react-slick\";\n\nimport { ADD_ANSWER } from \"../reducers/answer\";\nimport Question from \"../components/Question\";\nimport ProgressBar from \"../components/ProgressBar\";\nimport list from \"../assets/list.json\";\n\nconst Test = () => {\n\tconst router = useRouter();\n\tconst dispatch = useDispatch();\n\n\tconst [count, setCount] = useState(0);\n\tconst maxCount = list.arr.length;\n\tconst [answerArr, setAnswerArr] = useState([]);\n\n\tconst indexArr = [1, 2, 3, 4, 5, 6, 7];\n\tconst slickRef = useRef();\n\n\tconst handler = (ans, id) => {\n\t\tconsole.log(\"id = \", id);\n\t\tconsole.log(\"count = \", count);\n\t\tif (count !== id) {\n\t\t\tsetAnswerArr((prevArr) => [...prevArr, ans]);\n\n\t\t\t// if (id === maxCount) {\n\t\t\t// \trouter.push(\"/\");\n\t\t\t// \treturn;\n\t\t\t// }\n\t\t\tslickRef.current.slickNext();\n\t\t\tsetCount(id);\n\t\t} else {\n\t\t\tconsole.log(\"too fast\");\n\t\t\treturn;\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (answerArr.length === maxCount) {\n\t\t\tconsole.log(\"AnswerArr is: \" + answerArr);\n\t\t\tdispatch({\n\t\t\t\ttype: ADD_ANSWER,\n\t\t\t\tdata: answerArr,\n\t\t\t});\n\t\t}\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t<Slider\n\t\t\t\tinfinite={false}\n\t\t\t\tswipe={false}\n\t\t\t\tdraggable={false}\n\t\t\t\tstyle={{ marginTop: \"100px\", height: \"100%\" }}\n\t\t\t\tref={slickRef}\n\t\t\t\tfade={true}\n\t\t\t>\n\t\t\t\t{indexArr.map((ind) => {\n\t\t\t\t\tconsole.log(\"ind is = \", ind);\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Question index={ind} handler={handler} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</Slider>\n\n\t\t\t<ProgressBar i={count} length={maxCount} />\n\t\t</div>\n\t);\n};\n\nexport default Test;\n"]},"metadata":{},"sourceType":"module"}