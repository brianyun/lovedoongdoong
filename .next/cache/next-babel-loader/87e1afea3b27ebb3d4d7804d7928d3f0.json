{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useDispatch } from \"react-redux\";\nimport { Typography, Row, Col } from \"antd\";\nimport { useSelector } from \"react-redux\";\nconst {\n  Text\n} = Typography;\nimport { ADD_URL } from \"../reducers/answer\";\nimport { MAKE_DIRECT_FALSE } from \"../reducers/answer\";\nimport db from \"../back/firestore\";\nimport storage from \"../back/cloudStorage\";\nimport { v4 as uuid } from \"uuid\";\nimport calculator from \"../back/calculator\";\nimport result from \"../assets/result.json\";\nimport { WidthImg } from \"../assets/css/style_result\";\n\nconst Loading = () => {\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const {\n    ans\n  } = useSelector(state => state.answer);\n  const {\n    url\n  } = useSelector(state => state.answer);\n  const {\n    0: screenshotUrl,\n    1: setScreenshotUrl\n  } = useState(null);\n  const {\n    0: thumbUrl,\n    1: setThumbUrl\n  } = useState(null);\n  const {\n    0: goodUrl,\n    1: setGoodUrl\n  } = useState(null);\n  const {\n    0: badUrl,\n    1: setBadUrl\n  } = useState(null);\n  const {\n    0: ready,\n    1: setReady\n  } = useState(false);\n  const {\n    0: v,\n    1: setV\n  } = useState(null);\n  useEffect(() => {\n    if (ans) {\n      console.log(\"ans is \", ans);\n      setV(result[calculator(ans)]);\n      const now = new Date();\n      const uid = uuid();\n      const userObj = {\n        answer: ans,\n        type: calculator(ans),\n        created_at: now,\n        updated_at: now\n      };\n      db.collection(\"results\").doc(uid).set(userObj).then(res => {}).catch(error => {\n        //alert(\"error: \" + error.message);\n        console.log(error);\n      });\n    } else {\n      console.log(\"no ans.. bye\");\n      router.push(\"/result/\".concat(calculator([])));\n    }\n  }, [ans]);\n  useEffect(() => {\n    if (v) {\n      storage.ref().child(v[\"screenshot\"]).getDownloadURL().then(url => {\n        setScreenshotUrl(url);\n      }).catch(err => {\n        alert(err);\n      });\n      storage.ref().child(v[\"thumbnail\"]).getDownloadURL().then(url => {\n        setThumbUrl(url);\n      }).catch(err => {\n        alert(err);\n      });\n      storage.ref().child(result[v[\"good\"]][\"thumbnail\"]).getDownloadURL().then(url => {\n        setGoodUrl(url);\n      }).catch(err => {\n        alert(err);\n      });\n      storage.ref().child(result[v[\"bad\"]][\"thumbnail\"]).getDownloadURL().then(url => {\n        setBadUrl(url);\n      }).catch(err => {\n        alert(err);\n      });\n    }\n  }, [v]);\n  useEffect(() => {\n    if (screenshotUrl && thumbUrl && goodUrl && badUrl) {\n      dispatch({\n        type: ADD_URL,\n        data: {\n          screenshotUrl: screenshotUrl,\n          thumbUrl: thumbUrl,\n          goodUrl: goodUrl,\n          badUrl: badUrl\n        }\n      });\n      setReady(true);\n    }\n  }, [screenshotUrl, thumbUrl, goodUrl, badUrl]);\n  useEffect(() => {\n    dispatch({\n      type: MAKE_DIRECT_FALSE\n    });\n  }, [url[\"badUrl\"]]);\n\n  if (false) {\n    function checkReady() {\n      if (ready == false) {\n        window.setTimeout(checkReady, 500);\n      } else {\n        router.push(\"/result/\".concat(v[\"id\"]));\n        setReady(false);\n      }\n    }\n\n    checkReady();\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Row, {\n    justify: \"center\"\n  }, __jsx(Col, {\n    xs: 16,\n    sm: 14,\n    md: 10,\n    lg: 8,\n    xl: 8\n  }, __jsx(WidthImg, {\n    src: require(\"../assets/images/loading.gif\")\n  }))), __jsx(Row, {\n    justify: \"center\"\n  }, __jsx(Col, {\n    xs: 16,\n    sm: 14,\n    md: 10,\n    lg: 8,\n    xl: 8\n  }, __jsx(Text, {\n    style: {\n      textAlign: \"center\",\n      display: \"block\",\n      marginTop: \"30px\",\n      fontSize: \"20px\"\n    }\n  }, \"\\uBD84\\uC11D\\uC911..\"))));\n};\n\nexport default Loading;","map":null,"metadata":{},"sourceType":"module"}