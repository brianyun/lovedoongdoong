{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/hsyun/programming/web/mini_project/firebase-MBTI/pages/test2.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useDispatch } from \"react-redux\";\nimport Slider from \"react-slick\";\nimport { ADD_ANSWER } from \"../reducers/answer\";\nimport Question from \"../components/Question\";\nimport ProgressBar from \"../components/ProgressBar\";\nimport list from \"../assets/list.json\";\n\nvar Test = function Test() {\n  _s();\n\n  var router = useRouter();\n  var dispatch = useDispatch();\n\n  var _useState = useState(0),\n      count = _useState[0],\n      setCount = _useState[1];\n\n  var maxCount = list.arr.length;\n\n  var _useState2 = useState([]),\n      answerArr = _useState2[0],\n      setAnswerArr = _useState2[1];\n\n  var indexArr = [1, 2, 3, 4, 5, 6, 7];\n  var slickRef = useRef();\n\n  var handler = function handler(ans, id) {\n    console.log(\"id = \", id);\n    console.log(\"count = \", count);\n    slickRef.current.slickNext(); // if (count !== id) {\n    // \tsetAnswerArr((prevArr) => [...prevArr, ans]);\n    // \t// if (id === maxCount) {\n    // \t// \trouter.push(\"/\");\n    // \t// \treturn;\n    // \t// }\n    // \tslickRef.current.slickNext();\n    // \tsetCount(id);\n    // } else {\n    // \tconsole.log(\"too fast\");\n    // \treturn;\n    // }\n  };\n\n  useEffect(function () {\n    if (answerArr.length === maxCount) {\n      console.log(\"AnswerArr is: \" + answerArr);\n      dispatch({\n        type: ADD_ANSWER,\n        data: answerArr\n      });\n    }\n  });\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 3\n    }\n  }, __jsx(Slider, {\n    infinite: false,\n    swipe: false,\n    draggable: false,\n    style: {\n      marginTop: \"100px\",\n      height: \"100%\"\n    },\n    ref: slickRef,\n    fade: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 4\n    }\n  }, indexArr.map(function (ind) {\n    console.log(\"ind is = \", ind);\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, __jsx(Question, {\n      index: ind,\n      handler: handler,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 8\n      }\n    }));\n  })), __jsx(ProgressBar, {\n    i: count,\n    length: maxCount,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 4\n    }\n  }));\n};\n\n_s(Test, \"sGqx6H6JZ1Dwi/UkeZ4E7WJniPs=\", false, function () {\n  return [useRouter, useDispatch];\n});\n\n_c = Test;\nexport default Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["/Users/hsyun/programming/web/mini_project/firebase-MBTI/pages/test2.js"],"names":["React","useRef","useEffect","useState","useRouter","useDispatch","Slider","ADD_ANSWER","Question","ProgressBar","list","Test","router","dispatch","count","setCount","maxCount","arr","length","answerArr","setAnswerArr","indexArr","slickRef","handler","ans","id","console","log","current","slickNext","type","data","marginTop","height","map","ind"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,SAASC,UAAT,QAA2B,oBAA3B;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AAClB,MAAMC,MAAM,GAAGR,SAAS,EAAxB;AACA,MAAMS,QAAQ,GAAGR,WAAW,EAA5B;;AAFkB,kBAIQF,QAAQ,CAAC,CAAD,CAJhB;AAAA,MAIXW,KAJW;AAAA,MAIJC,QAJI;;AAKlB,MAAMC,QAAQ,GAAGN,IAAI,CAACO,GAAL,CAASC,MAA1B;;AALkB,mBAMgBf,QAAQ,CAAC,EAAD,CANxB;AAAA,MAMXgB,SANW;AAAA,MAMAC,YANA;;AAQlB,MAAMC,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAjB;AACA,MAAMC,QAAQ,GAAGrB,MAAM,EAAvB;;AAEA,MAAMsB,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD,EAAMC,EAAN,EAAa;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,EAArB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBb,KAAxB;AAEAQ,IAAAA,QAAQ,CAACM,OAAT,CAAiBC,SAAjB,GAJ4B,CAM5B;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAnBD;;AAqBA3B,EAAAA,SAAS,CAAC,YAAM;AACf,QAAIiB,SAAS,CAACD,MAAV,KAAqBF,QAAzB,EAAmC;AAClCU,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBR,SAA/B;AACAN,MAAAA,QAAQ,CAAC;AACRiB,QAAAA,IAAI,EAAEvB,UADE;AAERwB,QAAAA,IAAI,EAAEZ;AAFE,OAAD,CAAR;AAIA;AACD,GARQ,CAAT;AAUA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,MAAD;AACC,IAAA,QAAQ,EAAE,KADX;AAEC,IAAA,KAAK,EAAE,KAFR;AAGC,IAAA,SAAS,EAAE,KAHZ;AAIC,IAAA,KAAK,EAAE;AAAEa,MAAAA,SAAS,EAAE,OAAb;AAAsBC,MAAAA,MAAM,EAAE;AAA9B,KAJR;AAKC,IAAA,GAAG,EAAEX,QALN;AAMC,IAAA,IAAI,EAAE,IANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQED,QAAQ,CAACa,GAAT,CAAa,UAACC,GAAD,EAAS;AACtBT,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBQ,GAAzB;AACA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,MAAC,QAAD;AAAU,MAAA,KAAK,EAAEA,GAAjB;AAAsB,MAAA,OAAO,EAAEZ,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADD;AAKA,GAPA,CARF,CADD,EAmBC,MAAC,WAAD;AAAa,IAAA,CAAC,EAAET,KAAhB;AAAuB,IAAA,MAAM,EAAEE,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBD,CADD;AAuBA,CAjED;;GAAML,I;UACUP,S,EACEC,W;;;KAFZM,I;AAmEN,eAAeA,IAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useDispatch } from \"react-redux\";\nimport Slider from \"react-slick\";\n\nimport { ADD_ANSWER } from \"../reducers/answer\";\nimport Question from \"../components/Question\";\nimport ProgressBar from \"../components/ProgressBar\";\nimport list from \"../assets/list.json\";\n\nconst Test = () => {\n\tconst router = useRouter();\n\tconst dispatch = useDispatch();\n\n\tconst [count, setCount] = useState(0);\n\tconst maxCount = list.arr.length;\n\tconst [answerArr, setAnswerArr] = useState([]);\n\n\tconst indexArr = [1, 2, 3, 4, 5, 6, 7];\n\tconst slickRef = useRef();\n\n\tconst handler = (ans, id) => {\n\t\tconsole.log(\"id = \", id);\n\t\tconsole.log(\"count = \", count);\n\n\t\tslickRef.current.slickNext();\n\n\t\t// if (count !== id) {\n\t\t// \tsetAnswerArr((prevArr) => [...prevArr, ans]);\n\n\t\t// \t// if (id === maxCount) {\n\t\t// \t// \trouter.push(\"/\");\n\t\t// \t// \treturn;\n\t\t// \t// }\n\t\t// \tslickRef.current.slickNext();\n\t\t// \tsetCount(id);\n\t\t// } else {\n\t\t// \tconsole.log(\"too fast\");\n\t\t// \treturn;\n\t\t// }\n\t};\n\n\tuseEffect(() => {\n\t\tif (answerArr.length === maxCount) {\n\t\t\tconsole.log(\"AnswerArr is: \" + answerArr);\n\t\t\tdispatch({\n\t\t\t\ttype: ADD_ANSWER,\n\t\t\t\tdata: answerArr,\n\t\t\t});\n\t\t}\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t<Slider\n\t\t\t\tinfinite={false}\n\t\t\t\tswipe={false}\n\t\t\t\tdraggable={false}\n\t\t\t\tstyle={{ marginTop: \"100px\", height: \"100%\" }}\n\t\t\t\tref={slickRef}\n\t\t\t\tfade={true}\n\t\t\t>\n\t\t\t\t{indexArr.map((ind) => {\n\t\t\t\t\tconsole.log(\"ind is = \", ind);\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Question index={ind} handler={handler} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</Slider>\n\n\t\t\t<ProgressBar i={count} length={maxCount} />\n\t\t</div>\n\t);\n};\n\nexport default Test;\n"]},"metadata":{},"sourceType":"module"}