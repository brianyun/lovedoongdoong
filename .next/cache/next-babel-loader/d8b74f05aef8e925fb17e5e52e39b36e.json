{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { Row, Col } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useRouter } from \"next/router\";\nimport storage from \"../back/cloudStorage\";\nimport { ADD_URL } from \"../reducers/answer\";\nimport { MAKE_DIRECT_TRUE } from \"../reducers/answer\";\nimport { CLEAR_URLS } from \"../reducers/answer\";\nimport { Container, containerCol, RowsContainer, GoodBadContainer, WidthImg, Texty, Paragraphy, LineBreakText, GoodBadBtn } from \"../assets/css/style_result\";\nimport result from \"../assets/result.json\";\nimport Footer from \"./Footer\";\nimport ShareGroup from \"./ShareGroup\";\nimport icons from \"../back/icon_result\";\n\nconst Result = ({\n  name\n}) => {\n  const v = result[name];\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    url\n  } = useSelector(state => state.answer);\n  const {\n    isDirect\n  } = useSelector(state => state.answer);\n  const {\n    0: thumbUrl,\n    1: setThumbUrl\n  } = useState(null);\n  const {\n    0: goodTitle,\n    1: setGoodTitle\n  } = useState(\"\");\n  const {\n    0: goodId,\n    1: setGoodId\n  } = useState(\"\");\n  const {\n    0: badTitle,\n    1: setBadTitle\n  } = useState(\"\");\n  const {\n    0: badId,\n    1: setBadId\n  } = useState(\"\");\n  useEffect(() => {\n    setThumbUrl(url[\"thumbUrl\"]);\n    setGoodTitle(result[v[\"good\"]][\"title\"]);\n    setGoodId(result[v[\"good\"]][\"id\"]);\n    setBadTitle(result[v[\"bad\"]][\"title\"]);\n    setBadId(result[v[\"bad\"]][\"id\"]);\n  }, [url]);\n  useEffect(() => {\n    dispatch({\n      type: CLEAR_URLS\n    });\n\n    if (isDirect && !thumbUrl) {\n      console.log(\"[isDirect]\");\n      storage.ref().child(v[\"thumbnail\"]).getDownloadURL().then(url => {\n        setThumbUrl(url);\n      }).catch(err => {\n        return;\n      });\n    } else {\n      dispatch({\n        type: MAKE_DIRECT_TRUE\n      });\n    }\n  }, [isDirect]);\n  useEffect(() => {\n    if (isDirect && thumbUrl) {\n      dispatch({\n        type: ADD_URL,\n        data: {\n          thumbUrl: thumbUrl\n        }\n      });\n    }\n  }, [thumbUrl]);\n\n  const toGoodBad = id => {\n    if (id === \"\") {\n      return;\n    }\n\n    router.push(\"/result/\".concat(id));\n    dispatch({\n      type: CLEAR_URLS\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Container, null, __jsx(Col, containerCol, __jsx(WidthImg, {\n    src: require(\"../assets/images/result/header.png\")\n  }), __jsx(Texty, {\n    strong: true,\n    top: 10,\n    font: 30,\n    color: \"#be2edd\"\n  }, v[\"title\"]), __jsx(WidthImg, {\n    src: icons[v[\"id\"]]\n  }), __jsx(Texty, {\n    strong: true,\n    top: 10,\n    font: 20,\n    color: \"#be2edd\"\n  }, v[\"subtitle\"]), __jsx(Paragraphy, {\n    top: 10,\n    font: 15\n  }, v[\"description\"]), __jsx(WidthImg, {\n    src: require(\"../assets/images/result/line_horizontal.png\"),\n    style: {\n      marginBottom: \"20px\"\n    }\n  }), __jsx(RowsContainer, null, __jsx(GoodBadContainer, null, __jsx(Texty, {\n    font: 15,\n    strong: true\n  }, \"\\uC798 \\uB9DE\\uB294 \\uCE5C\\uAD6C\"), __jsx(GoodBadBtn, {\n    onClick: () => toGoodBad(goodId)\n  }, __jsx(LineBreakText, {\n    font: 15\n  }, goodTitle), __jsx(WidthImg, {\n    src: icons[goodId]\n  }))), __jsx(GoodBadContainer, {\n    width: 4\n  }, __jsx(\"img\", {\n    src: require(\"../assets/images/result/line_vertical.png\"),\n    style: {\n      height: \"200px\"\n    }\n  })), __jsx(GoodBadContainer, null, __jsx(Texty, {\n    font: 15,\n    strong: true\n  }, \"\\uC5B4\\uC0C9\\uD55C \\uCE5C\\uAD6C\"), __jsx(GoodBadBtn, {\n    onClick: () => toGoodBad(badId)\n  }, __jsx(LineBreakText, {\n    font: 15\n  }, badTitle), __jsx(WidthImg, {\n    src: icons[badId]\n  })))), __jsx(\"div\", {\n    style: {\n      height: \"20px\"\n    }\n  }), __jsx(ShareGroup, {\n    title: v[\"title\"] ? v[\"title\"] : \"\",\n    thumbUrl: thumbUrl ? thumbUrl : \"\"\n  }), __jsx(Footer, null))));\n};\n\nexport default Result;","map":null,"metadata":{},"sourceType":"module"}