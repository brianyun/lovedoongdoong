{"ast":null,"code":"var _jsxFileName = \"/Users/hsyun/programming/web/mini_project/firebase-MBTI/pages/test2.js\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useDispatch } from \"react-redux\";\nimport Slider from \"react-slick\";\nimport { ADD_ANSWER } from \"../reducers/answer\";\nimport Question from \"../components/Question\";\nimport ProgressBar from \"../components/ProgressBar\";\nimport list from \"../assets/list.json\";\n\nconst Test = () => {\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const {\n    0: count,\n    1: setCount\n  } = useState(0);\n  const maxCount = list.arr.length;\n  const {\n    0: answerArr,\n    1: setAnswerArr\n  } = useState([]);\n  const indexArr = [1, 2, 3, 4, 5, 6, 7];\n  const {\n    0: currentSlide,\n    1: setCurrentSlide\n  } = useState(0);\n\n  function handler(ans, id) {\n    if (count !== id) {\n      setAnswerArr(prevArr => [...prevArr, ans]);\n\n      if (id === maxCount) {\n        router.push(\"/loading\");\n        return;\n      }\n\n      carouselRef.current.next();\n      setCount(id);\n    } else {\n      return;\n    }\n  }\n\n  useEffect(() => {\n    if (answerArr.length === maxCount) {\n      console.log(\"AnswerArr is: \" + answerArr);\n      dispatch({\n        type: ADD_ANSWER,\n        data: answerArr\n      });\n    }\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 3\n    }\n  }, __jsx(Slick, {\n    initialSlide: 0,\n    afterChange: slide => setCurrentSlide(slide),\n    infinite: false,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    style: {\n      marginTop: \"100px\",\n      height: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 4\n    }\n  }, indexArr.map(ind => {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }, __jsx(Question, {\n      index: ind,\n      handler: handler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 8\n      }\n    }));\n  })), __jsx(ProgressBar, {\n    i: count,\n    length: maxCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }\n  }));\n};\n\nexport default Test;","map":{"version":3,"sources":["/Users/hsyun/programming/web/mini_project/firebase-MBTI/pages/test2.js"],"names":["React","useRef","useEffect","useState","useRouter","useDispatch","Slider","ADD_ANSWER","Question","ProgressBar","list","Test","router","dispatch","count","setCount","maxCount","arr","length","answerArr","setAnswerArr","indexArr","currentSlide","setCurrentSlide","handler","ans","id","prevArr","push","carouselRef","current","next","console","log","type","data","slide","marginTop","height","map","ind"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useDispatch } from \"react-redux\";\nimport Slider from \"react-slick\";\n\nimport { ADD_ANSWER } from \"../reducers/answer\";\nimport Question from \"../components/Question\";\nimport ProgressBar from \"../components/ProgressBar\";\nimport list from \"../assets/list.json\";\n\nconst Test = () => {\n\tconst router = useRouter();\n\tconst dispatch = useDispatch();\n\n\tconst [count, setCount] = useState(0);\n\tconst maxCount = list.arr.length;\n\tconst [answerArr, setAnswerArr] = useState([]);\n\n\tconst indexArr = [1, 2, 3, 4, 5, 6, 7];\n\tconst [currentSlide, setCurrentSlide] = useState(0);\n\n\tfunction handler(ans, id) {\n\t\tif (count !== id) {\n\t\t\tsetAnswerArr((prevArr) => [...prevArr, ans]);\n\n\t\t\tif (id === maxCount) {\n\t\t\t\trouter.push(\"/loading\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcarouselRef.current.next();\n\t\t\tsetCount(id);\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tif (answerArr.length === maxCount) {\n\t\t\tconsole.log(\"AnswerArr is: \" + answerArr);\n\t\t\tdispatch({\n\t\t\t\ttype: ADD_ANSWER,\n\t\t\t\tdata: answerArr,\n\t\t\t});\n\t\t}\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t<Slick\n\t\t\t\tinitialSlide={0}\n\t\t\t\tafterChange={(slide) => setCurrentSlide(slide)}\n\t\t\t\tinfinite={false}\n\t\t\t\tslidesToShow={1}\n\t\t\t\tslidesToScroll={1}\n\t\t\t\tstyle={{ marginTop: \"100px\", height: \"100%\" }}\n\t\t\t>\n\t\t\t\t{indexArr.map((ind) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Question index={ind} handler={handler} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</Slick>\n\n\t\t\t<ProgressBar i={count} length={maxCount} />\n\t\t</div>\n\t);\n};\n\nexport default Test;\n"]},"metadata":{},"sourceType":"module"}